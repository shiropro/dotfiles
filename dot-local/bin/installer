#!/bin/sh
print_space() {
    local _space_n=$1
    local i=0
    while [ $((i++)) -lt ${_space_n:=1} ]; do printf ' '; done
}

color_echo() {
    local _reset='\e[0m'
    local _n=$1 && shift
    case "$_n" in
    [0-6]) printf '\e[3%sm%b%b' "$_n" "$*" "$_reset" ;;
    7 | "fg") printf '\e[37m%b%b' "$*" "$_reset" ;;
    *) printf '\e[38;5;%bm%b%b' "$_n" "$*" "$_reset" ;;
    esac
}

color_print() {
    [ $# -le 0 ] && echo 'arguments less than zero' && return 1
    local inf_lv=$1
    shift
    local info="$*"
    case $inf_lv in
    # -i|--info   ) printf  "%s$(color_echo 4 %s %b)\n" \
    #                       "$(readlink -f ${0})" 'ÔÅö=>' "$info"
    # ;;
    # -s|--sucess ) printf  "%s$(color_echo 2 %s %b)\n" \
    #                       "$(readlink -f ${0})" '[‚úî]+>' "$info"
    # ;;
    # -w|--warn   ) printf  "%s$(color_echo 3 %s %b)\n" \
    #                       "$(readlink -f ${0})" 'ÔÅ±?>' "$info"
    # ;;
    # -e|--error  ) printf  "%s$(color_echo 1 %s %b)\n" \
    #                       "$(readlink -f ${0})" 'ÔÜà!>' "$info"
    # ;;
    # *) info=$inf_lv; printf "%s$(color_echo fg %s %b)\n" \
    #                       "$(readlink -f ${0})" 'ÔÅô->' "$info"
    # ;;
    -i | --info) printf "%s$(color_echo 4 %s %b)\n" 'üì®' '=>' "$info" ;;
    -s | --sucess) printf "%s$(color_echo 2 %s %b)\n" '‚úîÔ∏è' '+>' "$info" ;;
    -w | --warn) printf "%s$(color_echo 3 %s %b)\n" 'üö®' '!>' "$info" ;;
    -e | --error) printf "%s%s$(color_echo 1 %s %b)\n" '‚ùå' 'x>' "$info" ;;
    *)
        info=$inf_lv
        printf "%s%s$(color_echo fg %s %b)\n" '‚ùì' '?>' "$info"
        ;;
    esac
}

color_print2() {
    [ $# -le 0 ] && echo 'arguments less than zero' && return 1
    local inf_lv=$1
    shift
    local info=$*
    case $inf_lv in
    -i | --info)
        echo -e \\033\[44\;30mÓÇ±INFOÓÇ±ÓÇ±ÓÇ±\\033\[0m\\033\[47\;30m "$info"\\c
        print_space $(($(stty size | cut --delimiter=\  -f2) - 12 - ${#info}))
        echo -e \\033\[44\;30mÓÇ≥ÓÇ≥ÓÇ≥\\033\[0m
        ;;
    -w | --warn)
        echo -e \\033\[43\;30mÓÇ±WARNÓÇ±ÓÇ±ÓÇ±\\033\[0m\\033\[47\;30m "$info"\\c
        print_space $(($(stty size | cut --delimiter=\  -f2) - 12 - ${#info}))
        echo -e \\033\[43\;30mÓÇ≥ÓÇ≥ÓÇ≥\\033\[0m
        ;;
    -e | --error)
        echo -e \\033\[41\;37mÓÇ±ERRORÓÇ±ÓÇ±ÓÇ±\\033\[0m\\033\[47\;30m "$info"\\c
        print_space $(($(stty size | cut --delimiter=\  -f2) - 13 - ${#info}))
        echo -e \\033\[41\;37mÓÇ≥ÓÇ≥ÓÇ≥\\033\[0m
        ;;
    *)
        info=$inf_lv
        echo -e \\033\[47\;30m "$info"\\c
        print_space $(($(stty size | cut --delimiter=\  -f2) - ${#info}))
        echo -e \\033\[0m
        ;;
    esac
}

init_dir() {
    if [ -d "$*" ]; then
        rm -rf "$*" && mkdir -p "$*"
    else
        mkdir -p "$*"
    fi
}

filename_prefix() { # "$@" URL or file path
    basename "$*" |
        sed -E 's/\.tar.*$//g' |
        sed -E 's/\.zip$//g' |
        sed -E 's/\.git$//g' |
        sed -E 's/\.t[gx]z*$//g' |
        sed -E 's/\.7z$//g'
}

_installer() {
    [ $# -lt 2 ] && color_print -e "Insuffcient Args!" && return 1
    ! command -v git > /dev/null 2>&1 && color_print -e "Git Required!" && return 1

    # ! ÂàùÂßãÂåñÂæàÈáçË¶ÅÔºÅ
    unset _tmp_dir
    unset _direct
    unset _force
    unset bin_name
    unset _remove

    # ! ÊúÄÂêé‰∏Ä‰∏™ÈÄâÈ°πÂøÖÈ°ªÊòØ URL
    while [ "$1" ]; do
        case "$1" in
        # not works for directly install mode
        -[lL] | --local)
            shift && local _tmp_dir=$(mktemp -d)
            ;;
        -[nN] | --no-compile)
            shift && local _direct=y
            ;;
            # only works for no compile mode
        -[iI] | --install-dir)
            shift && local ins_d="${1:?no ins prefix}" && shift
            ;;
            # --install-dir=*) local ins_d="$(_kano_ExtVal "$1")" && shift
            #   ;;
        -[cC] | --command)
            shift && local _cmd="${1:?no compile cmd}" && shift
            ;;
            # --command=*) local _cmd="$(_kano_ExtVal "$1")" && shift
            #   ;;
        -[uUfF] | --update | --force)
            shift && local _force=y
            ;;
        --bin | --bin-name)
            shift && local bin_name="${1:?no binary}" && shift
            ;;
        -[rR] | --remove | --uninstall)
            shift && local _remove=y
            ;;
        *)
            local _url="$1" && shift
            ;;
        esac
    done

    # preprocess
    local _name=$(basename "$_url")
    local bin_name=${bin_name:-$(filename_prefix "$_url")}

    local repo_d="$_tmp_dir$(tmp_dir "$_url")"
    # Â¶ÇÊûú‰πãÂâçÊ≤°Âª∫ËøáËøô‰∏™Êñá‰ª∂Â§πÔºåËØ¥ÊòéÈìæÊé•Âèò‰∫ÜÊàñËÄÖÁâàÊú¨Êñ∞‰∫ÜÔºåÂº∫Âà∂ÂÆâË£Ö
    [ ! -d "$repo_d" ] && local _force=y
    local ins_d="${ins_d:-${_kano_PREFIX:-~/.local}/bin}"
    local src_d="$repo_d/$bin_name"

    # 1. ‰∏çÁªôÂá∫ binary name ÈªòËÆ§‰ΩøÁî® basename
    # 2. ÊåáÂÆö‰∏∫ none Ë°®Á§∫Ê≤°Êúâ binary ÂèØÊ£ÄÊü•
    if [ "$bin_name" != "none" ] && [ "$_force" != "y" ] && command -v $bin_name > /dev/null 2>&1; then
        # Â∞ùËØïËøôËæìÂá∫Ëøô‰∏™Á®ãÂ∫èÁöÑÁâàÊú¨‰ø°ÊÅØÔºå‰ΩÜÂõ†‰∏∫Ê†ºÂºè‰∏çÁªü‰∏ÄÔºå‰∏ç‰∏ÄÂÆöÊàêÂäü
        # FIXME: Ëß£ÂÜ≥‰∏ç‰∫Ü
        # local _ver_info='unknown version'
        # $bin_name --version > /dev/null 2>&1 && _ver_info=$($bin_name --version)
        # color_print -i "\n$_ver_info\n ‚Üí $(command -v $bin_name)\n"
        color_print -w "ALREADY INSTELLED ‚Üí $(command -v $bin_name)\n"
        [ "$_remove" != "y" ] && return 0
    fi

    # ÈáçÂÜôÂëΩ‰ª§
    if [ "$_remove" != "y" ]; then
        # _cmd="cd \"$src_d\" && make clean||true${_cmd:+" && $_cmd"}"
        _cmd="cd \"$src_d\" ${_cmd:+" && $_cmd"}"
    else
        _cmd="cd \"$src_d\" ${_cmd:+" && ${_cmd}"} && make -j uninstall && make -C ./build -j uninstall"
    fi

    [ ! -d $_tmp_dir ] && mkdir $_tmp_dir
    [ ! -d "$ins_d" ] && mkdir -p "$ins_d"

    # ÂéãÁº©ÂåÖËøòÊòØ rawÔºü
    case "$(printf "%s\n" "$_url" | rev | cut -s -d. -f1 | rev)" in
    [gx7]z | t[gx]z | bz2 | zip | tar) local file_t=tarball ;;
    git | *) local file_t=raw ;;
    esac

    # unarchive tarball
    if [ "$file_t" = "tarball" ]; then
        init_dir "$src_d" &&
            dl "$_url" "$repo_d" &&
            smartar x "$repo_d/$_name" "$src_d" --flat
    fi

    # directly (un)install from tarball
    if [ "$_direct" ] && [ "$file_t" = "tarball" ]; then
        if [ "$_remove" != "y" ]; then
            color_print -i "[Install $_name]\nFrom : $_url\nTo: $ins_d"
            if ls "$src_d"/* >/dev/null 2>&1; then
                cp -rf "$src_d"/* "$ins_d"/
                return 0
            else
                color_print -e "NOTHING to install"
                return 1
            fi
        else
            color_print -w "[UNinstall $_name]\nFrom : $ins_d"
            for _f in "$src_d"/*; do
                rm -rf "$ins_d/$(basename $_f)"
                unset _f
                return 0
            done
            rm -rf "$src_d"
        fi
    fi

    # directly (un)install from raw
    if [ "$_direct" ] && [ "$file_t" = "raw" ]; then
        if [ "$_remove" != "y" ]; then
            color_print -i "[Directly install $_name]\nFrom: $_url\nTo: $ins_d"
            dl "$_url" "$ins_d"
            [ "$_name" != "$bin_name" ] && mv -f "$ins_d/$_name" "$ins_d/$bin_name"
            [ -s "$ins_d/$bin_name" ] && chmod +x "$ins_d/$bin_name"
            return 0
        else
            color_print -w "[UNinstall $_name]\nFrom: $ins_d"
            rm -rf "$ins_d/$bin_name"
            return 0
        fi
    fi

    # todo rpm ÂåÖÂÆâË£ÖÂäüËÉΩ
    # *.rpm
    # rpm -i "$repo_d/$_name"
    # todo deb ÂåÖÂÆâË£ÖÂäüËÉΩ
    # *.deb
    # dpkg -i "$repo_d/$_name"
    #

    # ! Âè™Âú®ÁºñËØëÊúüÈó¥ËÆæÁΩÆËøô‰∫õÂèòÈáè

    # C_INCLUDE_PATH=\
    # ~/.local/include:\
    # ~/include:~/netbsd/pkg/include:\
    # $C_INCLUDE_PATH

    # CPLUS_INCLUDE_PATH=~/.local/include:\
    # ~/include:\
    # ~/netbsd/pkg/include:\
    # $CPLUS_INCLUDE_PATH

    # LD_LIBRARY_PATH=\
    # ~/.local/lib:\
    # ~/lib:\
    # ~/netbsd/pkg/lib:\
    # $LD_LIBRARY_PATH

    # LIBRARY_PATH=\
    # ~/.local/lib:\
    # ~/lib:\

    export PKG_CONFIG_PATH=~/.local/lib/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:$(pkg-config --variable pc_path pkg-config):$PKG_CONFIG_PATH

    # - Ë¶ÜÁõñ pkg-config
    # -----------------------------------------------------------------------------
    # export XFT_CFLAGS="-I$HOME/.local/include"
    # export XFT_LIBS="-L$HOME/.local/lib -lxft"
    # export XRENDER_CFLAGS="-I$HOME/.local/include"
    # export XRENDER_LIBS="-L$HOME/.local/lib -lXrender"
    # export FREETYPE_CFLAGS="-I/usr/include/freetype2"
    # export FREETYPE_LIBS="-L/usr/lib -lfreetype"
    # export FONTCONFIG_CFLAGS="-I/usr/include"
    # export FONTCONFIG_LIBS="-L/usr/lib -lfontconfig"
    # export XFT_CFLAGS="-I$HOME/.local/include"

    # git compile/make uninstall
    [ ! "$_direct" ] && [ "$file_t" = "raw" ] && smart-clone "$_url" "$repo_d" "$bin_name"
    if [ "$_remove" != "y" ]; then
        color_print -i "[Compile $bin_name]\nFrom: $_url\nAt: $src_d"
        init_dir "$src_d/build"
        # ? ./configure seems to pop up all directories
        sh -c "$_cmd"
    else
        color_print -w "[Try MAKE UNINSTALL $bin_name]\nFrom:\n$src_d\n$src_d/build"
        sh -c "$_cmd"
        # make -C "$src_d/build" uninstall
        # make -C "$src_d" uninstall
    fi
    unset PKG_CONFIG_PATH
}

_installer "$@"
